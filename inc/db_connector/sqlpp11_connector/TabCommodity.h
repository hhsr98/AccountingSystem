// generated by ddl2cpp TabCommodity.ddl TabCommodity sqlpp11_connector
#ifndef SQLPP_CONNECTOR_TABCOMMODITY_H
#define SQLPP_CONNECTOR_TABCOMMODITY_H

#include "sqlpp11/table.h"
#include "sqlpp11/data_types.h"
#include "sqlpp11/char_sequence.h"

namespace sqlpp11_connector
{
  namespace TabCommodity_
  {
    struct TCommodityID
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "tCommodityID";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T tCommodityID;
            T& operator()() { return tCommodityID; }
            const T& operator()() const { return tCommodityID; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct TCommodityName
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "tCommodityName";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T tCommodityName;
            T& operator()() { return tCommodityName; }
            const T& operator()() const { return tCommodityName; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
    };
    struct TUnitPrice
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "tUnitPrice";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T tUnitPrice;
            T& operator()() { return tUnitPrice; }
            const T& operator()() const { return tUnitPrice; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point, sqlpp::tag::require_insert>;
    };
    struct TCurrency
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "tCurrency";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T tCurrency;
            T& operator()() { return tCurrency; }
            const T& operator()() const { return tCurrency; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
    };
    struct TQuantity
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "tQuantity";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T tQuantity;
            T& operator()() { return tQuantity; }
            const T& operator()() const { return tQuantity; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point, sqlpp::tag::require_insert>;
    };
    struct TUnit
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "tUnit";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T tUnit;
            T& operator()() { return tUnit; }
            const T& operator()() const { return tUnit; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct TDiscount
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "tDiscount";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T tDiscount;
            T& operator()() { return tDiscount; }
            const T& operator()() const { return tDiscount; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct TDate
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "tDate";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T tDate;
            T& operator()() { return tDate; }
            const T& operator()() const { return tDate; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct TShopID
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "tShopID";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T tShopID;
            T& operator()() { return tShopID; }
            const T& operator()() const { return tShopID; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
    struct TRemarkID
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "tRemarkID";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T tRemarkID;
            T& operator()() { return tRemarkID; }
            const T& operator()() const { return tRemarkID; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
  }

  struct TabCommodity: sqlpp::table_t<TabCommodity,
               TabCommodity_::TCommodityID,
               TabCommodity_::TCommodityName,
               TabCommodity_::TUnitPrice,
               TabCommodity_::TCurrency,
               TabCommodity_::TQuantity,
               TabCommodity_::TUnit,
               TabCommodity_::TDiscount,
               TabCommodity_::TDate,
               TabCommodity_::TShopID,
               TabCommodity_::TRemarkID>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "TabCommodity";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T TabCommodity;
        T& operator()() { return TabCommodity; }
        const T& operator()() const { return TabCommodity; }
      };
    };
  };
} // namespace sqlpp11_connector
#endif
