// generated by ddl2cpp TabClassifyList.ddl TabClassifyList sqlpp11_connector
#ifndef SQLPP_CONNECTOR_TABCLASSIFYLIST_H
#define SQLPP_CONNECTOR_TABCLASSIFYLIST_H

#include <sqlpp11/table.h>
#include <sqlpp11/data_types.h>
#include <sqlpp11/char_sequence.h>

namespace sqlpp11_connector
{
  namespace TabClassifyList_
  {
    struct TClassifyListID
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "tClassifyListID";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T tClassifyListID;
            T& operator()() { return tClassifyListID; }
            const T& operator()() const { return tClassifyListID; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct TClassifyListName
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "tClassifyListName";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T tClassifyListName;
            T& operator()() { return tClassifyListName; }
            const T& operator()() const { return tClassifyListName; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
  }

  struct TabClassifyList: sqlpp::table_t<TabClassifyList,
               TabClassifyList_::TClassifyListID,
               TabClassifyList_::TClassifyListName>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "TabClassifyList";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T TabClassifyList;
        T& operator()() { return TabClassifyList; }
        const T& operator()() const { return TabClassifyList; }
      };
    };
  };
} // namespace sqlpp11_connector
#endif
